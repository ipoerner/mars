// Code generated by go-bindata.
// sources:
// templates/errors/403.html
// templates/errors/403.json
// templates/errors/403.txt
// templates/errors/403.xml
// templates/errors/404-dev.html
// templates/errors/404.html
// templates/errors/404.json
// templates/errors/404.txt
// templates/errors/404.xml
// templates/errors/405.html
// templates/errors/405.json
// templates/errors/405.txt
// templates/errors/405.xml
// templates/errors/500-dev.html
// templates/errors/500.html
// templates/errors/500.json
// templates/errors/500.txt
// templates/errors/500.xml
// DO NOT EDIT!

package mars

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _errors403Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8e\xb1\xae\xc3\x20\x0c\x45\x67\xf8\x0a\x5e\x3e\x20\xe8\xed\x2e\x4b\x93\xae\xed\x90\xa5\x63\x52\xac\x82\x44\x01\x51\x4b\x55\x85\xf2\xef\x15\x38\x93\xe5\x73\xed\xa3\x0b\x7f\xd3\xf5\xbc\xdc\x6f\xb3\x72\xf4\x0a\x46\x42\x1b\x2a\xac\xf1\x79\x1a\x30\x0e\x46\x0a\x70\xb8\x5a\x23\x85\x00\xf2\x14\xd0\x5c\x52\xd9\xbc\xb5\x18\x41\x33\x90\x02\xf4\x71\x03\x5b\xb2\x5f\x23\x45\xad\x1f\x4f\x4e\x8d\x73\x29\xa9\xec\x7b\x93\xfc\x37\x45\xad\xe3\xd2\x7e\x3a\xd2\x9d\x41\x3e\x82\x09\xdf\x8f\xe2\x33\xf9\x14\x39\xce\x5d\x84\xd1\xf2\xca\x6a\xd0\xdc\xf3\x17\x00\x00\xff\xff\xcb\x9b\x9d\x5f\xb8\x00\x00\x00")

func errors403HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors403Html,
		"errors/403.html",
	)
}

func errors403Html() (*asset, error) {
	bytes, err := errors403HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/403.html", size: 184, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors403Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x2a\xc9\x2c\xc9\x49\x55\xb2\x52\x50\xaa\xae\xce\x2a\x56\xd0\x73\x2d\x2a\xca\x2f\xd2\x0b\x01\x09\xd6\xd6\x2a\xe9\x40\xd4\xa4\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\xa1\xab\x74\x41\x48\xd5\xd6\x2a\x71\xd5\x72\x01\x02\x00\x00\xff\xff\x68\x44\xd3\x88\x57\x00\x00\x00")

func errors403JsonBytes() ([]byte, error) {
	return bindataRead(
		_errors403Json,
		"errors/403.json",
	)
}

func errors403Json() (*asset, error) {
	bytes, err := errors403JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/403.json", size: 87, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors403Txt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x0b\xc9\x2c\xc9\x49\xad\xad\xe5\xe2\x82\x8b\xb8\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\xd5\xd6\x72\x01\x02\x00\x00\xff\xff\xb3\x4d\x36\x36\x29\x00\x00\x00")

func errors403TxtBytes() ([]byte, error) {
	return bindataRead(
		_errors403Txt,
		"errors/403.txt",
	)
}

func errors403Txt() (*asset, error) {
	bytes, err := errors403TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/403.txt", size: 41, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors403Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xcb\x2f\x4a\xca\x4c\x49\x49\xcd\xb3\xab\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x73\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\xab\xad\xb5\xd1\x47\xa8\xe0\x02\x04\x00\x00\xff\xff\xe3\x85\x35\xef\x2e\x00\x00\x00")

func errors403XmlBytes() ([]byte, error) {
	return bindataRead(
		_errors403Xml,
		"errors/403.xml",
	)
}

func errors403Xml() (*asset, error) {
	bytes, err := errors403XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/403.xml", size: 46, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors404DevHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xcd\x6e\xdb\x3a\x10\x85\xd7\xd4\x53\x0c\x6c\xdc\x9d\xa3\x1f\xfb\xd6\x08\x14\x59\x40\x90\xc6\xe8\xa6\x40\xd1\xe6\x05\x68\x71\x6c\x12\xa1\x48\x81\x64\x1c\xbb\x82\xde\xbd\x20\xa9\x38\x95\xbd\xa9\xbd\x10\x38\xe4\x7c\xe7\x1c\x72\x2a\xeb\xce\x12\xc1\x9d\x3b\xdc\xcc\x1c\x9e\x5c\xd6\x58\x3b\xab\x13\xc2\x5d\x2b\x17\xb0\xd3\xec\x0c\x7d\x42\x48\x4b\xcd\x41\xa8\x12\xf2\x87\x84\x90\x8e\x32\x26\xd4\x61\x5c\xed\xb5\x72\x77\x7b\xda\x0a\x79\x2e\xe1\x1b\xca\x23\x3a\xd1\xd0\x05\x3c\x1a\x41\xe5\x02\x7e\x51\x65\xfd\xb1\x1d\x6d\x5e\x0f\x46\xbf\x29\x56\xc2\xfc\x39\xfc\x1e\x12\x32\x24\x24\xdd\x49\xdd\xbc\x06\x95\x0b\x78\x99\x77\xa7\xd0\xa4\x0d\x43\x73\xb7\xd3\xce\xe9\xb6\x84\xa2\x3b\x81\xd5\x52\x30\x98\x53\x4a\x63\xfb\x9c\x23\x65\x68\x80\x17\x01\x11\xdc\xbc\xa3\x38\x70\x57\x82\xd2\xa6\xa5\xf2\x62\xd2\x8a\xdf\x58\xc2\xf2\x3e\xb2\xff\x8e\xe4\x39\xad\x36\x18\x10\x8d\x96\xda\x94\x30\x5f\xaf\xd7\x57\xad\xf7\xf9\x7f\x9f\xae\x3c\x5e\xe1\xd4\x44\x7f\x1d\x74\xbb\xdd\x6e\x9f\x9e\xa6\x87\xba\x89\xca\x6a\xb5\x1a\xb7\x8d\x7e\x73\x68\x6f\x19\xfb\xb5\xff\x4f\x0f\xf1\xe5\x3f\xa6\x2d\xae\xd3\x42\x0e\x45\xde\x9d\x2e\xb1\x47\xa0\x96\xd0\x27\x93\x8a\x14\x9f\x12\x23\xeb\xff\xc8\x9a\xbc\x78\xab\x95\xb6\x1d\x6d\xfc\x4d\xdc\x84\xaa\xb2\x30\x5f\x75\x92\x54\x4c\x1c\x41\xb0\xcd\x2c\x5e\xc2\x0c\x1a\x49\xad\xdd\xcc\xc2\xe3\xfb\x81\xeb\xfb\x77\xe1\x38\xa4\xcf\xc6\x68\x33\x0c\x09\xa9\x78\x51\x27\x84\xf4\x7d\xfa\x22\x9c\xc4\x50\xca\x42\xad\xea\xc6\x8d\xaf\x68\x1b\x23\x3a\x27\xb4\x8a\xdb\x5d\x00\xa1\x62\x83\xd7\x66\xe2\x58\x27\x7d\x2f\xf6\x90\xfe\xf4\x99\x3c\xf6\xe2\x23\xa6\xbc\xf5\x51\xf1\x65\xfd\xc2\xd1\x22\x7c\x5c\x35\x3d\x22\xec\x10\x15\x38\x23\x90\x2d\x40\x28\x70\x5c\x58\x08\x53\x00\x65\x95\xf1\xa5\xef\xd3\x32\xba\x32\x54\x1d\xf0\x43\x31\x7e\xac\x77\x47\x48\x25\x45\xdd\xf7\x1d\x65\x90\x7e\x47\xc7\x35\x83\x22\x1f\x86\xb1\xf2\x83\x3a\x0e\x5f\xc2\x3a\x7d\x6c\x62\xa4\x2a\x93\x22\x42\x63\x24\x52\x65\x5e\xe5\x92\x2c\x56\xff\x04\x00\x00\xff\xff\xc7\x15\x99\xce\xc4\x03\x00\x00")

func errors404DevHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404DevHtml,
		"errors/404-dev.html",
	)
}

func errors404DevHtml() (*asset, error) {
	bytes, err := errors404DevHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404-dev.html", size: 964, mode: os.FileMode(420), modTime: time.Unix(1534244796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8f\xbd\x6e\xc4\x20\x10\x84\x6b\x78\x0a\xe2\x3e\x90\x48\x57\x6e\x68\xe2\x2b\xf3\x53\x5c\x93\xd2\x09\x7b\x31\x12\x07\x16\xde\x38\x8a\x56\xbc\x7b\xb4\xc6\x15\xe8\x9b\x4f\xcc\x00\x77\xe3\xdb\xf3\xe5\xe3\xfd\x6c\x66\xba\x25\xaf\x41\x0e\x93\xa6\xfc\xfd\x34\x60\x1e\xbc\x56\x30\xe3\x14\xbc\x56\x0a\x28\x52\x42\xff\x5a\xc8\x5c\xcb\x4f\x0e\xe0\x3a\xd0\x0a\xdc\xe1\xc0\x67\x09\x7f\x5e\x6b\xe6\x78\x35\x76\xc4\xed\xa5\x04\x6c\x4d\x00\xe1\x6d\x49\x13\xa1\x19\xb0\xd6\x52\x57\x77\x7a\x38\xdd\x07\xdc\xac\x14\x0e\xc6\x76\x0b\xd3\xba\xfb\x8a\xf9\x37\xd2\x6c\xec\x59\xe4\xd6\x64\xc6\xa3\x8c\x60\xb6\x17\x69\xdd\x91\xdb\x19\x2c\x47\x30\xe2\xfa\x55\xe3\x42\xb1\xe4\x1e\x4b\xc0\x8c\x39\x1c\x8f\xf7\x8b\x02\xd7\x67\x82\xeb\x7f\xfe\x0f\x00\x00\xff\xff\x13\x44\x04\x34\x04\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 260, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors404Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x2a\xc9\x2c\xc9\x49\x55\xb2\x52\x50\xaa\xae\xce\x2a\x56\xd0\x73\x2d\x2a\xca\x2f\xd2\x0b\x01\x09\xd6\xd6\x2a\xe9\x40\xd4\xa4\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\xa1\xab\x74\x41\x48\xd5\xd6\x2a\x71\xd5\x72\x01\x02\x00\x00\xff\xff\x68\x44\xd3\x88\x57\x00\x00\x00")

func errors404JsonBytes() ([]byte, error) {
	return bindataRead(
		_errors404Json,
		"errors/404.json",
	)
}

func errors404Json() (*asset, error) {
	bytes, err := errors404JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.json", size: 87, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors404Txt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x0b\xc9\x2c\xc9\x49\xad\xad\xe5\xe2\x82\x8b\xb8\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\xd5\xd6\x72\x01\x02\x00\x00\xff\xff\xb3\x4d\x36\x36\x29\x00\x00\x00")

func errors404TxtBytes() ([]byte, error) {
	return bindataRead(
		_errors404Txt,
		"errors/404.txt",
	)
}

func errors404Txt() (*asset, error) {
	bytes, err := errors404TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.txt", size: 41, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors404Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\xcb\x2f\x49\xcb\x2f\xcd\x4b\xb1\xab\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x73\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\xab\xad\xb5\xd1\x87\x2b\xe0\x02\x04\x00\x00\xff\xff\x72\x9e\x8f\xfc\x2c\x00\x00\x00")

func errors404XmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Xml,
		"errors/404.xml",
	)
}

func errors404Xml() (*asset, error) {
	bytes, err := errors404XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.xml", size: 44, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors405Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8e\xb1\xae\xc3\x20\x0c\x45\x67\xf8\x0a\x5e\x3e\x20\xe8\xed\x2e\x4b\x93\xb1\x6a\x87\x2c\x1d\xd3\x62\x15\x24\x8a\x11\xb5\x14\x55\x28\xff\x5e\x01\x99\x2c\xdf\x63\x1f\x5d\xf8\x9b\xae\xe7\xe5\x7e\x9b\x95\xe3\x77\x30\x12\xea\x50\x61\x8d\xaf\xd3\x80\x71\x30\x52\x80\xc3\xd5\x1a\x29\x04\xb0\xe7\x80\xe6\x82\xec\xc8\xaa\x48\xac\xd6\x10\x68\x43\x0b\xba\x13\x29\x40\x1f\xc7\xf0\x20\xfb\x35\x52\x94\xb2\x79\x76\x6a\x9c\x73\xa6\xbc\xef\xd5\xf6\x5f\x5d\xa5\x8c\x4b\xfd\x69\x91\x6e\x19\xa4\x03\x4c\xf8\x79\x66\x9f\xd8\x53\xec\x38\x35\x11\x46\xdb\xd7\xae\x06\xdd\x0b\xff\x02\x00\x00\xff\xff\x7a\x1e\xd5\x9b\xc1\x00\x00\x00")

func errors405HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors405Html,
		"errors/405.html",
	)
}

func errors405Html() (*asset, error) {
	bytes, err := errors405HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/405.html", size: 193, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors405Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x2a\xc9\x2c\xc9\x49\x55\xb2\x52\x50\xaa\xae\xce\x2a\x56\xd0\x73\x2d\x2a\xca\x2f\xd2\x0b\x01\x09\xd6\xd6\x2a\xe9\x40\xd4\xa4\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\xa1\xab\x74\x41\x48\xd5\xd6\x2a\x71\xd5\x72\x01\x02\x00\x00\xff\xff\x68\x44\xd3\x88\x57\x00\x00\x00")

func errors405JsonBytes() ([]byte, error) {
	return bindataRead(
		_errors405Json,
		"errors/405.json",
	)
}

func errors405Json() (*asset, error) {
	bytes, err := errors405JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/405.json", size: 87, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors405Txt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x0b\xc9\x2c\xc9\x49\xad\xad\xe5\xe2\x82\x8b\xb8\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\xd5\xd6\x72\x01\x02\x00\x00\xff\xff\xb3\x4d\x36\x36\x29\x00\x00\x00")

func errors405TxtBytes() ([]byte, error) {
	return bindataRead(
		_errors405Txt,
		"errors/405.txt",
	)
}

func errors405Txt() (*asset, error) {
	bytes, err := errors405TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/405.txt", size: 41, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors405Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\x4d\x2d\xc9\xc8\x4f\xd1\xcd\xcb\x2f\xd1\x4d\xcc\xc9\xc9\x2f\x4f\x4d\xb1\xab\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x73\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\xab\xad\xb5\xd1\xc7\xa2\x94\x0b\x10\x00\x00\xff\xff\x6b\x32\xfe\xc9\x40\x00\x00\x00")

func errors405XmlBytes() ([]byte, error) {
	return bindataRead(
		_errors405Xml,
		"errors/405.xml",
	)
}

func errors405Xml() (*asset, error) {
	bytes, err := errors405XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/405.xml", size: 64, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500DevHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\xff\x6a\xe3\x46\x10\xfe\x5b\xf7\x14\x53\x87\x42\x5b\x62\x5b\xb6\x8f\x70\x28\x8a\x21\xa4\x17\x7a\xd0\x96\xc2\xe5\x05\xd6\xda\x91\x77\xb9\xd5\xae\x58\xad\x63\xbb\xc2\xef\x5e\x76\x57\xab\x5b\x49\xae\xb9\x84\x10\x6b\xf4\xcd\xcc\x37\xdf\xfc\x48\x92\x24\x6f\xcc\x59\x20\x98\x73\x8d\x4f\x33\x83\x27\xb3\x2c\x9a\x66\xb6\xfd\x90\x24\xcc\x54\xe2\x1e\x76\x8a\x9e\xa1\xfd\x90\x24\x49\x45\xf4\x9e\xcb\x0c\xd2\x47\xfb\x54\x13\x4a\xb9\xdc\x87\xc7\x52\x49\x33\x2f\x49\xc5\xc5\x39\x83\x3f\x50\xbc\xa3\xe1\x05\xb9\x87\x67\xcd\x89\xb8\x87\xaf\x44\x36\x0e\xb7\x23\xc5\xb7\xbd\x56\x07\x49\x33\xb8\xfb\xec\xbe\xac\xfd\xf2\x21\x49\x16\x3b\xa1\x8a\x6f\x3e\x57\x1f\x7d\x9d\xd6\x27\xef\xa8\x34\x45\x3d\xdf\x29\x63\x54\x95\xc1\xaa\x3e\x41\xa3\x04\xa7\x70\x47\x08\x09\x21\xee\x18\x12\x8a\x1a\xd8\xca\x87\x71\xac\x8e\xc8\xf7\xcc\x64\x20\x95\xae\x88\xf8\xce\xb6\xe1\xff\x62\x06\xeb\x4f\x5d\x82\x41\x79\x2e\x58\xa5\x34\xfa\x38\x85\x12\x4a\x67\x70\xf7\xf0\xf0\x30\xf6\xff\x94\xfe\x1c\xf1\xb3\x59\x24\x8e\xe9\xb4\x93\xca\xcb\x82\xae\xe9\x84\x76\x3d\xcc\xb6\xd9\x6c\x7a\x44\xa3\x0e\xba\xc0\x6b\x91\x1e\xec\xf7\x18\xc7\xd6\x3f\x2c\xc0\x6a\x22\x00\xa4\xb0\x4a\xeb\x53\xa4\x44\x17\x75\x21\xb8\xc4\xbf\x0f\xd5\x2e\xd4\x54\x0a\x45\x4c\x06\x02\x4b\xe3\x42\x50\xde\xd4\x82\x9c\x33\x70\xad\x74\xa6\x23\xa7\x86\x65\xf0\x31\xf4\xd1\x8e\xd8\x9c\x08\xbe\x97\x19\x68\xcb\x2b\xca\x3d\xd7\x9e\xe8\x2a\x80\x63\x9a\x1f\x63\x5b\x98\xb4\x4a\x49\xd5\xd4\xa4\xc0\xe9\x70\x75\xea\xf5\x6a\x96\x65\x79\xb5\x9e\x4e\x73\x81\x44\x67\xb0\x53\x86\x3d\x5e\xe9\x41\x20\x18\x8d\xdf\x38\x58\x1d\x86\xe5\x1a\xe9\xe1\xee\xa8\x77\xd4\xa5\x50\xc7\xf9\x29\x03\xc6\x29\x45\x39\x61\x86\x5a\x2b\x3d\x1c\x87\x22\x4d\xe1\x27\x5e\xd5\x4a\x1b\x22\xcd\xff\x78\x4c\x5a\x34\xd0\xa4\x48\x27\x3d\x25\x1e\xe6\xda\x42\xb1\x50\x9a\x18\xae\xe4\x68\x8e\x03\x36\x63\x96\x3a\xfc\xd6\x11\x3b\xe8\xc6\x32\xab\x15\x97\x06\xf5\x0d\x72\xc1\xb1\xd7\x68\xc0\xea\xf5\xf9\xf5\xf5\xe5\xf5\x86\x3b\x56\xb1\xb2\xf6\x5e\x0d\x86\x79\xc2\xfd\x20\x29\x6a\x2b\xc4\xe3\x64\x07\x76\x4a\xd0\x71\xf8\xc6\x68\x25\xf7\x37\x53\xdc\x88\x61\x48\x38\x5a\x83\xa2\x10\x71\x70\x27\x53\x58\x61\x65\x7f\x46\x9e\x6c\x73\x73\x53\x23\x64\xa1\x68\x3c\x61\xdd\x0a\x0c\x37\xe0\xc8\xb8\xc1\xb9\x7b\xce\xac\xda\x21\x44\xbe\x74\x35\xd9\xb3\xde\xb6\x47\x6e\x18\x2c\x3e\xdb\x79\xb9\xb8\x97\x94\xbf\x03\xa7\x4f\x33\x7f\x86\x66\x50\x08\xd2\x34\x4f\x33\xb7\xc4\xee\x4f\x41\x92\xb3\xd5\xb6\x6d\x17\x6f\xdc\x08\xbc\x5c\xf2\x25\x5b\x79\x73\xed\x7e\x25\x6d\xcb\x4b\x58\x7c\x75\x72\xbe\x9d\x6b\x74\x61\x93\x24\x79\x63\x08\x6d\x3b\x78\x01\xb9\x97\xdb\x86\xfb\x87\x18\x66\xa3\x75\x16\xa0\x0a\x1b\x90\xca\x40\xa1\xaa\x9a\xdb\x16\x44\xe0\xdf\xb1\x29\x34\xaf\x6d\x87\x23\x9f\x2e\x3d\x8a\xa6\x4f\x3a\xc6\x06\x88\xa4\xfe\x73\xbe\x74\xac\xf3\x25\xe5\xef\x5e\x10\x4b\xde\x73\x89\xd5\xf0\xd3\x71\x5d\x8d\xf5\xf6\x8b\x84\xbe\x82\x48\x83\x3f\xb9\xec\x89\xfc\x42\xdc\x30\x40\xfc\xc6\x5f\x9c\xb6\x7b\xea\x58\x79\xc0\x8b\x12\x87\x4a\x5e\x2e\x50\xb8\x0f\x16\x15\x4c\x1d\xee\xd7\x69\x29\x6c\xed\x18\xb5\xad\x26\x72\x8f\x36\x88\xb4\xeb\xe0\x15\xef\x88\xb8\x8a\xba\x2a\xba\xfc\x36\xdf\x97\xa6\x1b\x01\x77\x39\xba\xa8\xbe\x40\xfb\x6f\x41\x4d\x64\xec\xe4\x6f\xca\x6c\xdb\x73\xcf\xf2\xa5\xc5\x04\x7c\xad\x71\xdb\xb7\xda\x36\xc8\x1a\x7c\xfa\x20\x74\xc4\x3c\x12\x3f\x98\xba\x19\xb2\xa3\x3e\xea\x83\x35\x05\xe1\x37\xdb\x17\x22\x04\x38\x58\xbe\x64\x1b\x6f\xb6\xab\xe1\xb2\x7b\xef\x7c\xe9\x0c\xb7\xf2\xfc\x85\x86\x7c\xdf\x80\x1f\x69\xba\xeb\xfa\x33\xa5\xdc\x4e\x15\x11\xe2\x7c\x0f\x44\x82\xbf\xba\xaa\x28\x0e\x5a\x23\x85\x23\xe3\x02\x81\x11\x49\x05\x97\x7b\x30\x8c\x37\x1e\xb2\xe8\x5b\x35\x6d\x87\x03\x04\xe1\xdb\x76\xcc\x2d\x12\xf0\x6a\x39\xfe\xd3\x7f\x01\x00\x00\xff\xff\xd5\x95\xb6\xde\xca\x09\x00\x00")

func errors500DevHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500DevHtml,
		"errors/500-dev.html",
	)
}

func errors500DevHtml() (*asset, error) {
	bytes, err := errors500DevHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500-dev.html", size: 2506, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x90\xc1\x6a\x43\x21\x10\x45\xd7\xbe\xaf\xb0\x59\xb7\x4e\x12\xe8\x6e\x10\x4a\x5f\x96\x25\x5d\x64\xd3\xa5\xd5\x29\x0a\x26\x8a\xda\x40\x11\xff\xbd\xa8\x8f\x6c\x14\xe6\xcc\xf5\x1e\xc4\xa7\xf5\xfc\x7e\xf9\xfa\x3c\x71\x5b\xae\x5e\x2e\x38\x2f\x86\x96\x94\x91\x0b\x63\x58\x5c\xf1\x24\xdf\x62\xf4\x4e\xab\xe2\xc2\x8d\x53\x4a\x21\x21\x4c\xb0\x30\x84\x6d\x17\xbf\x83\xf9\xeb\x99\x5a\xdd\x0f\x17\x2b\xdd\x3f\x82\xa1\xd6\xc6\xa4\xd0\x35\x7a\x55\x88\xef\x46\x3c\xc3\xeb\x7e\xff\x62\xe8\x2e\x7a\xe1\x8e\x8b\x6d\x8d\x7c\x9e\x09\xb4\x07\x79\x0e\x31\x3f\x73\xb5\x35\xf2\xa0\xf5\x6f\x22\x23\x10\xec\x61\xa8\xd9\xa3\xac\x55\x9c\x3a\x14\x97\x6e\xd3\x1a\x82\x3d\x0e\x16\xfb\xc9\x1e\x78\xa5\xac\x93\x8b\xdd\x7f\x3e\x0f\x71\x9a\xd2\xcd\xf4\x01\xc2\x94\x47\x98\x1f\xf0\x1f\x00\x00\xff\xff\xf9\xbe\xf4\x8e\x18\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 280, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x2a\xc9\x2c\xc9\x49\x55\xb2\x52\x50\xaa\xae\xce\x2a\x56\xd0\x73\x2d\x2a\xca\x2f\xd2\x0b\x01\x09\xd6\xd6\x2a\xe9\x40\xd4\xa4\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\xa1\xab\x74\x41\x48\xd5\xd6\x2a\x71\xd5\x72\x01\x02\x00\x00\xff\xff\x68\x44\xd3\x88\x57\x00\x00\x00")

func errors500JsonBytes() ([]byte, error) {
	return bindataRead(
		_errors500Json,
		"errors/500.json",
	)
}

func errors500Json() (*asset, error) {
	bytes, err := errors500JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.json", size: 87, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Txt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\xc1\xca\xc2\x30\x10\x84\xef\x79\x8a\xa5\xa7\xff\x3f\x98\x07\xf0\xe0\x45\x3d\x14\x14\x44\x7d\x81\xd2\x6c\xed\x42\xd9\x68\x9a\xaa\xb0\xec\xbb\x4b\x93\x5a\xc5\x5c\x32\x3b\xcc\x37\x23\x62\xb7\x21\xf8\x60\xcf\x14\x3b\x54\x35\xb3\xb1\xc1\xbe\x0e\x74\x8d\xe4\x59\xd5\x18\x11\x6a\x00\x6f\x60\x8f\x03\xef\xbd\x43\x28\x1c\xde\x8b\x04\x3c\x28\xb6\x90\xa9\x74\x53\x03\xf6\x50\xc5\x56\xd5\x2c\xe6\x67\x4a\x06\x91\xc9\x87\x1c\xda\x11\xa3\xea\x5f\x15\xfc\xc0\x0e\x3a\x62\x1c\x23\xd9\xfd\x17\x41\x76\x79\x39\x54\x7c\x41\xb0\x6b\xcf\x11\x9f\xf1\xe4\x87\x50\xe3\xbc\x54\xf6\xd3\xf2\x4a\x04\xbb\x1e\x53\x7b\x42\x3f\x65\xcb\x51\xbe\xb9\xaf\xe2\x2c\x7e\xff\x57\x00\x00\x00\xff\xff\xb3\x88\xf0\x34\x14\x01\x00\x00")

func errors500TxtBytes() ([]byte, error) {
	return bindataRead(
		_errors500Txt,
		"errors/500.txt",
	)
}

func errors500Txt() (*asset, error) {
	bytes, err := errors500TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.txt", size: 276, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\x2d\x2a\xca\x2f\xb2\xe3\xe2\xb4\x29\xc9\x2c\xc9\x49\xb5\xab\xae\xd6\x73\x05\x89\xe8\x85\x80\xb8\xb5\xb5\x36\xfa\x10\x71\x2e\x4e\x9b\x94\xd4\xe2\xe4\xa2\xcc\x82\x92\xcc\xfc\x3c\x84\x32\x17\x84\x20\x48\x31\xb2\x1a\x2e\x1b\x7d\xa8\xe1\x80\x00\x00\x00\xff\xff\xc2\x10\xe4\x31\x65\x00\x00\x00")

func errors500XmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Xml,
		"errors/500.xml",
	)
}

func errors500Xml() (*asset, error) {
	bytes, err := errors500XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.xml", size: 101, mode: os.FileMode(420), modTime: time.Unix(1534172567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"errors/403.html": errors403Html,
	"errors/403.json": errors403Json,
	"errors/403.txt": errors403Txt,
	"errors/403.xml": errors403Xml,
	"errors/404-dev.html": errors404DevHtml,
	"errors/404.html": errors404Html,
	"errors/404.json": errors404Json,
	"errors/404.txt": errors404Txt,
	"errors/404.xml": errors404Xml,
	"errors/405.html": errors405Html,
	"errors/405.json": errors405Json,
	"errors/405.txt": errors405Txt,
	"errors/405.xml": errors405Xml,
	"errors/500-dev.html": errors500DevHtml,
	"errors/500.html": errors500Html,
	"errors/500.json": errors500Json,
	"errors/500.txt": errors500Txt,
	"errors/500.xml": errors500Xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"errors": &bintree{nil, map[string]*bintree{
		"403.html": &bintree{errors403Html, map[string]*bintree{}},
		"403.json": &bintree{errors403Json, map[string]*bintree{}},
		"403.txt": &bintree{errors403Txt, map[string]*bintree{}},
		"403.xml": &bintree{errors403Xml, map[string]*bintree{}},
		"404-dev.html": &bintree{errors404DevHtml, map[string]*bintree{}},
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"404.json": &bintree{errors404Json, map[string]*bintree{}},
		"404.txt": &bintree{errors404Txt, map[string]*bintree{}},
		"404.xml": &bintree{errors404Xml, map[string]*bintree{}},
		"405.html": &bintree{errors405Html, map[string]*bintree{}},
		"405.json": &bintree{errors405Json, map[string]*bintree{}},
		"405.txt": &bintree{errors405Txt, map[string]*bintree{}},
		"405.xml": &bintree{errors405Xml, map[string]*bintree{}},
		"500-dev.html": &bintree{errors500DevHtml, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
		"500.json": &bintree{errors500Json, map[string]*bintree{}},
		"500.txt": &bintree{errors500Txt, map[string]*bintree{}},
		"500.xml": &bintree{errors500Xml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

